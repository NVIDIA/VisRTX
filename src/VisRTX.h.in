/*
* Copyright (c) 2019, NVIDIA CORPORATION. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*  * Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*  * Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*  * Neither the name of NVIDIA CORPORATION nor the names of its
*    contributors may be used to endorse or promote products derived
*    from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#pragma once

#define VISRTX_VERSION_MAJOR @VISRTX_VERSION_MAJOR@
#define VISRTX_VERSION_MINOR @VISRTX_VERSION_MINOR@
#define VISRTX_VERSION_PATCH @VISRTX_VERSION_PATCH@
#define VISRTX_VERSION "@VISRTX_VERSION@"


#include <cstdint>
#include <cstdlib>
#include <exception>


namespace VisRTX
{
    /*
     * Enums
     */
    enum class Error : uint32_t
    {
        SUCCESS = 0,
        UNKNOWN_ERROR = 1,
        INVALID_ARGUMENT = 2,
        INVALID_OPERATION = 3,
        OUT_OF_MEMORY = 4,
        UNSUPPORTED = 5,
        IO_ERROR = 6,
        MDL_ERROR = 7,
    };

    enum class FrameBufferFormat : uint32_t
    {
        RGBA8 = 0,
        RGBA32F = 1,
    };

    enum class TextureFormat : uint32_t
    {
        RGBA8 = 0,
        RGB8 = 1,
        RGBA32F = 2,
        RGB32F = 3,
        R8 = 4,
        R32F = 5
    };

    enum class TextureFiltering : uint32_t
    {
        LINEAR = 0,
        NEAREST = 1
    };

    enum class TextureWrapMode : uint32_t
    {
        REPEAT = 0,
        CLAMP_TO_EDGE = 1,
        MIRROR = 2
    };

    enum class LightType : uint32_t
    {
        SPHERICAL = 0,
        DIRECTIONAL = 1,
        QUAD = 2,
        SPOT = 3,
        AMBIENT = 4,
        HDRI = 5,
    };

    enum class CameraType : uint32_t
    {
        PERSPECTIVE = 0,
        ORTHOGRAPHIC = 1,
    };

    enum class DenoiserType : uint32_t
    {
        NONE = 0,
        AI = 1,
    };

    enum class GeometryType : uint32_t
    {
        TRIANGLES = 0,
        SPHERES = 1,
        CYLINDERS = 2,
        DISKS = 3,
        CURVES = 4
    };

    enum class GeometryFlag : uint32_t
    {
        STATIC = 0, // Geometry is modified in model never / rarely
        DYNAMIC = 1 // Geometry is modified in model regularly / every frame
    };

    enum class MaterialType : uint32_t
    {
        BASIC = 0,
        MDL = 1
    };

    enum class CompilationType : uint32_t
    {
        INSTANCE = 0,
        CLASS = 1
    };

    enum class ParameterType : uint32_t
    {
        NONE = 0,
        BOOL = 1,
        INT = 2,
        FLOAT = 3,
        DOUBLE = 4,
        COLOR = 5,
        TEXTURE = 6,
    };

    /*
     * Vector types
     */
    struct Vec2f
    {
        float x;
        float y;

        Vec2f() : x(0.0f), y(0.0) {}
        Vec2f(float x, float y) : x(x), y(y) {}
    };

    struct Vec3f
    {
        union { float x; float r; };
        union { float y; float g; };
        union { float z; float b; };

        Vec3f() : x(0.0f), y(0.0f), z(0.0f) {}
        Vec3f(float x, float y, float z) : x(x), y(y), z(z) {}
    };

    struct Vec4f
    {
        union { float x; float r; };
        union { float y; float g; };
        union { float z; float b; };
        union { float w; float a; };

        Vec4f() : x(0.0f), y(0.0f), z(0.0f), w(0.0f) {}
        Vec4f(float x, float y, float z, float w = 1.0f) : x(x), y(y), z(z), w(w) {}
    };

    struct Vec2i
    {
        int32_t x;
        int32_t y;

        Vec2i() : x(0), y(0) {}
        Vec2i(int32_t x, int32_t y) : x(x), y(y) {}
    };

    struct Vec3i
    {
        int32_t x;
        int32_t y;
        int32_t z;

        Vec3i() : x(0), y(0), z(0) {}
        Vec3i(int32_t x, int32_t y, int32_t z) : x(x), y(y), z(z) {}
    };

    struct Vec2ui
    {
        union { uint32_t x; uint32_t width; };
        union { uint32_t y; uint32_t height; };

        Vec2ui() : x(0), y(0) {}
        Vec2ui(uint32_t x, uint32_t y) : x(x), y(y) {}
    };

    struct Vec3ui
    {
        uint32_t x;
        uint32_t y;
        uint32_t z;

        Vec3ui() : x(0), y(0), z(0) {}
        Vec3ui(uint32_t x, uint32_t y, uint32_t z) : x(x), y(y), z(z) {}
    };

    struct Vec4b
    {
        union { uint8_t x; uint8_t r; };
        union { uint8_t y; uint8_t g; };
        union { uint8_t z; uint8_t b; };
        union { uint8_t w; uint8_t a; };

        Vec4b() : x(0), y(0), z(0), w(0) {}
        Vec4b(uint8_t x, uint8_t y, uint8_t z, uint8_t w = 255) : x(x), y(y), z(z), w(w) {}
    };


    /*
     * Exception
     */
    class Exception : public std::exception {
    public:
        Exception(Error code, const char* message) : code(code), message(message) {}
        virtual ~Exception() throw() {}

        Error getErrorCode() const { return this->code; }
        virtual const char* what() const throw() { return this->message; }

    private:
        Error code;
        const char* message;
    };


    /**
     * Forward declarations.
     */
    class Renderer;
    class FrameBuffer;
    class Camera;
    class PerspectiveCamera;
    class OrthographicCamera;
    class Light;
    class SphericalLight;
    class DirectionalLight;
    class QuadLight;
    class SpotLight;
    class AmbientLight;
    class HDRILight;
    class Geometry;
    class TriangleGeometry;
    class SphereGeometry;
    class CylinderGeometry;
    class DiskGeometry;
    class Texture;
    class Material;
    class BasicMaterial;
    class MDLMaterial;
    class Model;


    /*
     * Picking
     */
    struct PickResult
    {
        bool geometryHit;
        Geometry* geometry;
        uint32_t primitiveIndex;

        bool lightHit;
        Light* light;

        Vec3f position;
    };

    
    /*
     * Clipping 
     */
    struct ClippingPlane
    {
        Vec3f position;
        Vec3f normal;
        bool primaryRaysOnly;
    };



    /**
     * Reference-counted base class.
     */
    class Object
    {
    public:
        virtual ~Object() = default;
        virtual void Retain() = 0;
        virtual void Release() = 0;
    };


    /**
     * Renderer.
     */
    class Renderer : public virtual Object
    {
    public:
        virtual void Render(VisRTX::FrameBuffer* frameBuffer) = 0;
        virtual bool Pick(const Vec2f& screenPos, PickResult& result) = 0;

        virtual void SetCamera(VisRTX::Camera* camera) = 0;
        virtual void SetModel(VisRTX::Model* model) = 0;

        virtual void AddLight(VisRTX::Light* light) = 0;
        virtual void RemoveLight(VisRTX::Light* light) = 0;

        virtual void SetClippingPlanes(uint32_t numPlanes, ClippingPlane* planes) = 0;

        virtual void SetToneMapping(bool enabled, float gamma = 2.2f, const Vec3f& colorBalance = Vec3f(1.0f, 1.0f, 1.0f), float whitePoint = 1.0f, float burnHighlights = 0.8f, float crushBlacks = 0.2f, float saturation = 1.2f, float brightness = 0.8f) = 0;

        virtual void SetDenoiser(DenoiserType denoiser) = 0;

        virtual void SetSamplesPerPixel(uint32_t spp) = 0;
        virtual void SetAlphaCutoff(float alphaCutoff) = 0;
        virtual void SetNumBounces(uint32_t minBounces, uint32_t maxBounces) = 0;
        virtual void SetWriteBackground(bool writeBackground) = 0;
        virtual void SetFireflyClamping(float direct, float indirect) = 0;
        virtual void SetSampleAllLights(bool sampleAllLights) = 0;
        virtual void SetEpsilon(float epsilon) = 0;
        
    protected:
        Renderer() = default;
        Renderer(const Renderer&) = delete;

    public:
        virtual ~Renderer() = default;
    };


    /**
     * Frame buffer.
     */
    class FrameBuffer : public virtual Object
    {
    public:
        virtual void Resize(const Vec2ui& size) = 0;

        virtual void Clear() = 0;

        virtual FrameBufferFormat GetFormat() = 0;

        virtual const void* MapColorBuffer() = 0;
        virtual const float* MapDepthBuffer() = 0;
        virtual void Unmap(const void* mapped) = 0;

        virtual uint32_t GetColorTextureGL() = 0;
        virtual uint32_t GetDepthTextureGL() = 0;

        virtual void SetDepthNormalization(float clipMin, float clipMax) = 0;

    protected:
        FrameBuffer() = default;
        FrameBuffer(const FrameBuffer&) = delete;

    public:
        virtual ~FrameBuffer() = default;
    };


    /**
     * Camera base class.
     */
    class Camera : public virtual Object
    {
    public:
        virtual void SetPosition(const Vec3f& position) = 0;
        virtual void SetDirection(const Vec3f& direction) = 0;
        virtual void SetUp(const Vec3f& up) = 0;

		virtual void SetImageRegion(const Vec2f& begin, const Vec2f& end) = 0;

        virtual CameraType GetType() const = 0;

    protected:
        Camera() = default;
        Camera(const Camera&) = delete;

    public:
        virtual ~Camera() = default;
    };


    /**
     * Perspective camera.
     */
    class PerspectiveCamera : public virtual Camera
    {
    public:
        virtual void SetFovY(float fovy) = 0;
        virtual void SetAspect(float aspect) = 0;

        virtual void SetFocalDistance(float focalDistance) = 0;
        virtual void SetApertureRadius(float apertureRadius) = 0;

        CameraType GetType() const { return CameraType::PERSPECTIVE; }

    protected:
        PerspectiveCamera() = default;
        PerspectiveCamera(const PerspectiveCamera&) = delete;

    public:
        virtual ~PerspectiveCamera() = default;
    };


    /**
     * Orthographic camera.
     */
    class OrthographicCamera : public virtual Camera
    {
    public:
        virtual void SetHeight(float height) = 0;
        virtual void SetAspect(float aspect) = 0;

        CameraType GetType() const { return CameraType::ORTHOGRAPHIC; }

    protected:
        OrthographicCamera() = default;
        OrthographicCamera(const OrthographicCamera&) = delete;

    public:
        virtual ~OrthographicCamera() = default;
    };


    /**
     * Light base class.
     */
    class Light : public virtual Object
    {
    public:
        virtual void SetEnabled(bool enabled) = 0;
        virtual void SetVisible(bool visible) = 0;
        virtual void SetColor(const Vec3f& color) = 0;
        virtual void SetIntensity(float intensity) = 0;

        virtual LightType GetType() const = 0;

    protected:
        Light() = default;
        Light(const Light&) = delete;

    public:
        virtual ~Light() = default;
    };


    /**
     * Spherical light.
     */
    class SphericalLight : public virtual Light
    {
    public:
        virtual void SetPosition(const Vec3f& position) = 0;
        virtual void SetRadius(float radius) = 0;

        LightType GetType() const { return LightType::SPHERICAL; }

    protected:
        SphericalLight() = default;
        SphericalLight(const SphericalLight&) = delete;

    public:
        virtual ~SphericalLight() = default;
    };


    /**
     * Directional light.
     */
    class DirectionalLight : public virtual Light
    {
    public:
        virtual void SetDirection(const Vec3f& direction) = 0;
        virtual void SetAngularDiameter(float angularDiameter) = 0;

        LightType GetType() const { return LightType::DIRECTIONAL; }

    protected:
        DirectionalLight() = default;
        DirectionalLight(const DirectionalLight&) = delete;

    public:
        virtual ~DirectionalLight() = default;
    };


    /**
     * Quad light.
     */
    class QuadLight : public virtual Light
    {
    public:
        virtual void SetRect(const Vec3f& position, const Vec3f& edge1, const Vec3f& edge2) = 0;
        virtual void SetTwoSided(bool twoSided) = 0;

        LightType GetType() const { return LightType::QUAD; }

    protected:
        QuadLight() = default;
        QuadLight(const QuadLight&) = delete;

    public:
        virtual ~QuadLight() = default;
    };


    /**
     * Spot light.
     */
    class SpotLight : public virtual Light
    {
    public:
        virtual void SetPosition(const Vec3f& position) = 0;
        virtual void SetDirection(const Vec3f& direction) = 0;
        virtual void SetOpeningAngle(float openingAngle) = 0;
        virtual void SetPenumbraAngle(float penumbraAngle) = 0;
        virtual void SetRadius(float radius) = 0;

        LightType GetType() const { return LightType::SPOT; }

    protected:
        SpotLight() = default;
        SpotLight(const SpotLight&) = delete;

    public:
        virtual ~SpotLight() = default;
    };


    /**
     * Ambient light.
     */
    class AmbientLight : public virtual Light
    {
    public:
        LightType GetType() const { return LightType::AMBIENT; }

    protected:
        AmbientLight() = default;
        AmbientLight(const AmbientLight&) = delete;

    public:
        virtual ~AmbientLight() = default;
    };


    /**
     * HDRI light.
     */
    class HDRILight : public virtual Light
    {
    public:
        virtual void SetTexture(VisRTX::Texture* texture) = 0;
        virtual void SetDirection(const Vec3f& direction) = 0;
        virtual void SetUp(const Vec3f& up) = 0;

        LightType GetType() const { return LightType::HDRI; }

    protected:
        HDRILight() = default;
        HDRILight(const HDRILight&) = delete;

    public:
        virtual ~HDRILight() = default;
    };


    /**
     * Geometry base class.
     */
    class Geometry : public virtual Object
    {
    public:
        virtual void SetMaterial(VisRTX::Material* material) = 0;
        virtual void SetAnimatedParameterization(bool enabled, float time, float frequency, float scale) = 0;

        virtual GeometryType GetType() const = 0;

    protected:
        Geometry() = default;
        Geometry(const Geometry&) = delete;

    public:
        virtual ~Geometry() = default;
    };


    /**
     * Triangle geometry.
     */
    class TriangleGeometry : public virtual Geometry
    {
    public:
        virtual void SetTriangles(uint32_t numTriangles, const Vec3ui* triangles, uint32_t numVertices, const Vec3f* vertices, const Vec3f* normals = nullptr) = 0;
        virtual void SetColors(const Vec4f* vertexColors) = 0;
        virtual void SetTexCoords(const Vec2f* vertexTexCoords) = 0;
        virtual void SetParameterization(const float* vertexParameterization) = 0;
        virtual void SetMaterials(VisRTX::Material** const triangleMaterials) = 0;

        GeometryType GetType() const { return GeometryType::TRIANGLES; }

    protected:
        TriangleGeometry() = default;
        TriangleGeometry(const TriangleGeometry&) = delete;

    public:
        virtual ~TriangleGeometry() = default;
    };


    /**
     * Sphere geometry.
     */
    class SphereGeometry : public virtual Geometry
    {
    public:
        virtual void SetSpheres(uint32_t numVertices, const Vec3f* vertices, const float* radii = nullptr) = 0;
        virtual void SetColors(const Vec4f* vertexColors) = 0;
        virtual void SetTexCoords(const Vec2f* vertexTexCoords) = 0;
        virtual void SetParameterization(const float* vertexParameterization) = 0;
        virtual void SetRadius(float radius) = 0;
        virtual void SetSpheresAndColors(uint32_t numVertices, const void* vertexData, uint32_t bytesPerSphere = 12, uint32_t offsetCenter = 0, int32_t offsetRadius = -1, int32_t offsetColorIndex = -1, const Vec4f* colors = nullptr) = 0;
        virtual void SetMaterials(VisRTX::Material** const sphereMaterials) = 0;

        GeometryType GetType() const { return GeometryType::SPHERES; }

    protected:
        SphereGeometry() = default;
        SphereGeometry(const SphereGeometry&) = delete;

    public:
        virtual ~SphereGeometry() = default;
    };


    /**
     * Cylinder geometry.
     */
    class CylinderGeometry : public virtual Geometry
    {
    public:
        virtual void SetCylinders(uint32_t numCylinders, const Vec2ui* cylinders, uint32_t numVertices, const Vec3f* vertices, const float* radii = nullptr) = 0;
        virtual void SetColors(const Vec4f* vertexColors) = 0;
        virtual void SetTexCoords(const Vec2f* vertexTexCoords) = 0;
        virtual void SetParameterization(const float* vertexParameterization) = 0;
        virtual void SetRadius(float radius) = 0;
        virtual void SetCylindersAndColors(uint32_t numCylinders, const void* cylinderData, uint32_t bytesPerCylinder = 24, uint32_t offsetVertex0 = 0, uint32_t offsetVertex1 = 12, int32_t offsetRadius = -1, const Vec4f* cylinderColors = nullptr) = 0;
        virtual void SetMaterials(VisRTX::Material** const cylinderMaterials) = 0;

        GeometryType GetType() const { return GeometryType::CYLINDERS; }

    protected:
        CylinderGeometry() = default;
        CylinderGeometry(const CylinderGeometry&) = delete;

    public:
        virtual ~CylinderGeometry() = default;
    };


    /**
     * Disk geometry.
     */
    class DiskGeometry : public virtual Geometry
    {
    public:
        virtual void SetDisks(uint32_t numVertices, const Vec3f* vertices, const Vec3f* normals, const float* radii = nullptr) = 0;
        virtual void SetColors(const Vec4f* vertexColors) = 0;
        virtual void SetTexCoords(const Vec2f* vertexTexCoords) = 0;
        virtual void SetParameterization(const float* vertexParameterization) = 0;
        virtual void SetRadius(float radius) = 0;

        GeometryType GetType() const { return GeometryType::DISKS; }

    protected:
        DiskGeometry() = default;
        DiskGeometry(const DiskGeometry&) = delete;

    public:
        virtual ~DiskGeometry() = default;
    };


    /**
     * Texture.
     */
    class Texture : public virtual Object
    {
    public:
        virtual void SetPixels(const Vec2ui& size, TextureFormat format, const void* src) = 0;
        virtual void SetFiltering(TextureFiltering minification, TextureFiltering magnification) = 0;
        virtual void SetWrapMode(TextureWrapMode wrapModeU, TextureWrapMode wrapModeV) = 0;
        virtual void SetMaxAnisotropy(float maxAnisotropy) = 0;

    protected:
        Texture() = default;
        Texture(const Texture&) = delete;

    public:
        virtual ~Texture() = default;
    };


    /**
     * Material base class.
     */
    class Material : public virtual Object
    {
    public:
        virtual MaterialType GetType() const = 0;

    protected:
        Material() = default;
        Material(const Material&) = delete;

    public:
        virtual ~Material() = default;
    };


    /**
     * Basic material
     */
    class BasicMaterial : public virtual Material
    {
    public:
        virtual void SetDiffuse(const Vec3f& Kd) = 0;
        virtual void SetDiffuseTexture(VisRTX::Texture* diffuseTex) = 0;

        virtual void SetSpecular(const Vec3f& Ks) = 0;
        virtual void SetSpecularTexture(VisRTX::Texture* specularTex) = 0;
        virtual void SetShininess(float Ns) = 0;
        virtual void SetShininessTexture(VisRTX::Texture* shininessTex) = 0;

        virtual void SetEmissive(const Vec3f& Ke) = 0;
        virtual void SetEmissiveTexture(VisRTX::Texture* emissiveTex) = 0;
        virtual void SetLuminosity(float luminosity) = 0;

        virtual void SetOpacity(float opacity) = 0;
        virtual void SetOpacityTexture(VisRTX::Texture* opacityTex) = 0;

        virtual void SetTransparencyFilter(const Vec3f& Tf) = 0;

        virtual void SetBumpMapTexture(VisRTX::Texture* bumpMapTex) = 0;

        MaterialType GetType() const { return MaterialType::BASIC; }

    protected:
        BasicMaterial() = default;
        BasicMaterial(const BasicMaterial&) = delete;

    public:
        virtual ~BasicMaterial() = default;
    };


    /**
     * MDL material
     */
    class MDLMaterial : public virtual Material
    {
    public:
        virtual void Load(const char* material, const char* source = nullptr, uint32_t sourceBytes = 0, uint32_t numModulePaths = 0, const char** modulePaths = nullptr) = 0;

        virtual void Compile() = 0;

        virtual const char* GetName() const = 0;

        virtual CompilationType GetCompilationType() const = 0;

        virtual uint32_t GetParameterCount() = 0;
        virtual const char* GetParameterName(uint32_t i) = 0;

        virtual ParameterType GetParameterType(const char* name) = 0;
        virtual const char* GetParameterDescription(const char* name) = 0;

        virtual bool GetParameterBool(const char* name) = 0;
        virtual bool SetParameterBool(const char* name, bool value) = 0;

        virtual int GetParameterInt(const char* name) = 0;
        virtual bool SetParameterInt(const char* name, int value) = 0;

        virtual float GetParameterFloat(const char* name) = 0;
        virtual bool SetParameterFloat(const char* name, float value) = 0;

        virtual double GetParameterDouble(const char* name) = 0;
        virtual bool SetParameterDouble(const char* name, double value) = 0;

        virtual Vec3f GetParameterColor(const char* name) = 0;
        virtual bool SetParameterColor(const char* name, const Vec3f& value) = 0;

        virtual void GetParameterValueOther(const char* name, void* data, size_t size) = 0;
        virtual bool SetParameterValueOther(const char* name, const void* data, size_t size) = 0;

        virtual bool SetParameterTexture(const char* name, VisRTX::Texture* texture) = 0;

        MaterialType GetType() const { return MaterialType::MDL; }

    protected:
        MDLMaterial() = default;
        MDLMaterial(const MDLMaterial&) = delete;

    public:
        virtual ~MDLMaterial() = default;
    };


    /**
     * Model.
     */
    class Model : public virtual Object
    {
    public:
        virtual void AddGeometry(VisRTX::Geometry* geometry, GeometryFlag flag = GeometryFlag::STATIC) = 0;
        virtual void RemoveGeometry(VisRTX::Geometry* geometry) = 0;

    protected:
        Model() = default;
        Model(const Model&) = delete;

    public:
        virtual ~Model() = default;
    };


    /*
     * Instance / context
     */
    class Context
    {
    public:
        /*
         * Device query and configuration
         */
        virtual uint32_t GetDeviceCount() = 0;
        virtual const char* GetDeviceName(uint32_t device) = 0;
        virtual uint64_t GetDeviceMemoryTotal(uint32_t device) = 0;
        virtual uint64_t GetDeviceMemoryAvailable(uint32_t device) = 0;
        virtual bool SetDevices(uint32_t numDevices, uint32_t* devices) = 0;

    public:
        /*
         * Factory
         */
        virtual VisRTX::Renderer* CreateRenderer() = 0;

        virtual VisRTX::FrameBuffer* CreateFrameBuffer(FrameBufferFormat format) = 0;
        virtual VisRTX::FrameBuffer* CreateFrameBuffer(FrameBufferFormat format, const Vec2ui& size) = 0;

        virtual VisRTX::PerspectiveCamera* CreatePerspectiveCamera() = 0;
        virtual VisRTX::PerspectiveCamera* CreatePerspectiveCamera(const Vec3f& position, const Vec3f& direction, const Vec3f& up, float fovy = 45.0f) = 0;

        virtual VisRTX::OrthographicCamera* CreateOrthographicCamera() = 0;
        virtual VisRTX::OrthographicCamera* CreateOrthographicCamera(const Vec3f& position, const Vec3f& direction, const Vec3f& up, float height) = 0;

        virtual VisRTX::SphericalLight* CreateSphericalLight() = 0;
        virtual VisRTX::SphericalLight* CreateSphericalLight(const Vec3f& position, const Vec3f& color, float radius = 0.0f) = 0;

        virtual VisRTX::DirectionalLight* CreateDirectionalLight() = 0;
        virtual VisRTX::DirectionalLight* CreateDirectionalLight(const Vec3f& direction, const Vec3f& color) = 0;

        virtual VisRTX::QuadLight* CreateQuadLight() = 0;
        virtual VisRTX::QuadLight* CreateQuadLight(const Vec3f& position, const Vec3f& edge1, const Vec3f& edge2, const Vec3f& color) = 0;

        virtual VisRTX::SpotLight* CreateSpotLight() = 0;
        virtual VisRTX::SpotLight* CreateSpotLight(const Vec3f& position, const Vec3f& direction, const Vec3f& color, float openingAngle, float penumbraAngle = 0.0f, float radius = 0.0f) = 0;

        virtual VisRTX::AmbientLight* CreateAmbientLight() = 0;
        virtual VisRTX::AmbientLight* CreateAmbientLight(const Vec3f& color) = 0;

        virtual VisRTX::HDRILight* CreateHDRILight() = 0;
        virtual VisRTX::HDRILight* CreateHDRILight(VisRTX::Texture* texture) = 0;

        virtual VisRTX::TriangleGeometry* CreateTriangleGeometry() = 0;
        virtual VisRTX::TriangleGeometry* CreateTriangleGeometry(uint32_t numTriangles, const Vec3ui* triangles, uint32_t numVertices, const Vec3f* vertices, const Vec3f* normals = nullptr) = 0;

        virtual VisRTX::SphereGeometry* CreateSphereGeometry() = 0;
        virtual VisRTX::SphereGeometry* CreateSphereGeometry(uint32_t numVertices, const Vec3f* vertices, const float* radii = nullptr) = 0;

        virtual VisRTX::CylinderGeometry* CreateCylinderGeometry() = 0;
        virtual VisRTX::CylinderGeometry* CreateCylinderGeometry(uint32_t numCylinders, const Vec2ui* cylinders, uint32_t numVertices, const Vec3f* vertices, const float* radii = nullptr) = 0;

        virtual VisRTX::DiskGeometry* CreateDiskGeometry() = 0;
        virtual VisRTX::DiskGeometry* CreateDiskGeometry(uint32_t numVertices, const Vec3f* vertices, const Vec3f* normals, const float* radii = nullptr) = 0;

        virtual VisRTX::Texture* CreateTexture() = 0;
        virtual VisRTX::Texture* CreateTexture(const Vec2ui& size, TextureFormat format, const void* src) = 0;

        virtual VisRTX::BasicMaterial* CreateBasicMaterial() = 0;

        virtual VisRTX::MDLMaterial* CreateMDLMaterial() = 0;
        virtual VisRTX::MDLMaterial* CreateMDLMaterial(const char* material, const char* source = nullptr, uint32_t sourceBytes = 0, uint32_t numModulePaths = 0, const char** modulePaths = nullptr, CompilationType compilationType = CompilationType::CLASS, uint8_t priority = 0) = 0;

        virtual VisRTX::Model* CreateModel() = 0;

    protected:
        Context() = default;
        Context(const Context&) = delete;
        ~Context() = default;
    };
}



/*
 * Core interface supporting both dynamic loading and dynamic linking
 *
 * VisRTX_LoadLibrary returns false if the library could not be loaded.
 * VisRTX_GetContext returns nullptr if no capable devices are detected.
 */
#ifdef VISRTX_DYNLOAD

#ifdef _WIN32
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#else
#include <dlfcn.h>
#endif

typedef VisRTX::Context*(*VisRTX_GetContext_t)();
VisRTX_GetContext_t VisRTX_GetContext = nullptr;

inline bool VisRTX_LoadLibrary()
{
    // Load library
#ifdef _WIN32
    HINSTANCE handle = LoadLibrary("VisRTX.dll");
#else
    void* handle = dlopen("libVisRTX.so", RTLD_LAZY | RTLD_LOCAL);
#endif
    if (!handle)
        return false;

    // Retrieve function pointer
#ifdef _WIN32
    VisRTX_GetContext = reinterpret_cast<VisRTX_GetContext_t>(GetProcAddress((HMODULE)handle, "VisRTX_GetContext"));
#else
    VisRTX_GetContext = reinterpret_cast<VisRTX_GetContext_t>(dlsym(handle, "VisRTX_GetContext"));
#endif
    if (!VisRTX_GetContext)
        return false;

    return true;
}

#else

#ifdef _WIN32
#   ifdef VisRTX_EXPORTS
#       define VISRTX_INTERFACE __declspec(dllexport)
#   else
#       define VISRTX_INTERFACE __declspec(dllimport)
#   endif
#else
#   define VISRTX_INTERFACE __attribute__((visibility("default")))
#endif

extern "C"
{
    VISRTX_INTERFACE VisRTX::Context* VisRTX_GetContext();
}

#endif

