// Copyright (c) 2019-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
// This file was generated by generate_device_frontend.py
// Don't make changes to this directly

#include "VisGLString.h"
#include <cstdint>
namespace visgl{
int parameter_string_hash(const char *str) {
   static const uint32_t table[] = {0x71700029u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x75740091u,0x706c00a1u,0x706c00acu,0x666500beu,0x797800c4u,0x6a6900c9u,0x0u,0x0u,0x6f6e0119u,0x0u,0x0u,0x6a690124u,0x6a61012au,0x70650141u,0x71620155u,0x7372017eu,0x0u,0x66650189u,0x6665018fu,0x66650195u,0x0u,0x0u,0x706f019fu,0x6665002au,0x6f6e002bu,0x4847002cu,0x4d4c002du,0x6000002eu,0x80000000u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x4645008eu,0x5453008fu,0x1000090u,0x80000001u,0x75740092u,0x73720093u,0x6a690094u,0x63620095u,0x76750096u,0x75740097u,0x66650098u,0x34300099u,0x100009du,0x100009eu,0x100009fu,0x10000a0u,0x80000002u,0x80000003u,0x80000004u,0x80000005u,0x666500a5u,0x0u,0x0u,0x757400a9u,0x6f6e00a6u,0x656400a7u,0x10000a8u,0x80000006u,0x696800aau,0x10000abu,0x80000007u,0x626100b0u,0x0u,0x0u,0x6d6c00bau,0x6e6d00b1u,0x717000b2u,0x555400b3u,0x706f00b4u,0x464500b5u,0x656400b6u,0x686700b7u,0x666500b8u,0x10000b9u,0x80000008u,0x706f00bbu,0x737200bcu,0x10000bdu,0x80000009u,0x777600bfu,0x6a6900c0u,0x646300c1u,0x666500c2u,0x10000c3u,0x8000000au,0x626100c5u,0x646300c6u,0x757400c7u,0x10000c8u,0x8000000bu,0x737200cau,0x747300cbu,0x757400ccu,0x470000cdu,0x8000000cu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x73720114u,0x62610115u,0x6e6d0116u,0x66650117u,0x1000118u,0x8000000du,0x6463011au,0x7372011bu,0x6665011cu,0x6e6d011du,0x6665011eu,0x6f6e011fu,0x75740120u,0x62610121u,0x6d6c0122u,0x1000123u,0x8000000eu,0x6f6e0125u,0x66650126u,0x62610127u,0x73720128u,0x1000129u,0x8000000fu,0x74730133u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x73720136u,0x6c6b0134u,0x1000135u,0x80000010u,0x73720137u,0x706f0138u,0x73720139u,0x5352013au,0x6665013bu,0x7170013cu,0x6665013du,0x6261013eu,0x7574013fu,0x1000140u,0x80000011u,0x6261014cu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x6f6e0152u,0x7372014du,0x6665014eu,0x7473014fu,0x75740150u,0x1000151u,0x80000012u,0x66650153u,0x1000154u,0x80000013u,0x6b6a0164u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x62610179u,0x66650165u,0x64630166u,0x75740167u,0x514e0168u,0x706f016bu,0x0u,0x706f0171u,0x7372016cu,0x6e6d016du,0x6261016eu,0x6d6c016fu,0x1000170u,0x80000014u,0x74730172u,0x6a690173u,0x75740174u,0x6a690175u,0x706f0176u,0x6f6e0177u,0x1000178u,0x80000015u,0x7271017au,0x7675017bu,0x6665017cu,0x100017du,0x80000016u,0x6a69017fu,0x6e6d0180u,0x6a690181u,0x75740182u,0x6a690183u,0x77760184u,0x66650185u,0x4a490186u,0x65640187u,0x1000188u,0x80000017u,0x7170018au,0x6665018bu,0x6261018cu,0x7574018du,0x100018eu,0x80000018u,0x64630190u,0x706f0191u,0x6f6e0192u,0x65640193u,0x1000194u,0x80000019u,0x74730196u,0x74730197u,0x66650198u,0x6d6c0199u,0x6d6c019au,0x6261019bu,0x7574019cu,0x6665019du,0x100019eu,0x8000001au,0x737201a0u,0x6d6c01a1u,0x656401a2u,0x514e01a3u,0x706f01a6u,0x0u,0x706f01acu,0x737201a7u,0x6e6d01a8u,0x626101a9u,0x6d6c01aau,0x10001abu,0x8000001bu,0x747301adu,0x6a6901aeu,0x757401afu,0x6a6901b0u,0x706f01b1u,0x6f6e01b2u,0x10001b3u,0x8000001cu};
   uint32_t cur = 0x784f0000u;
   for(int i = 0;cur!=0;++i) {
      uint32_t idx = cur&0xFFFFu;
      uint32_t low = (cur>>16u)&0xFFu;
      uint32_t high = (cur>>24u)&0xFFu;
      uint32_t c = (uint32_t)str[i];
      if(c>=low && c<high) {
         cur = table[idx+c-low];
      } else {
         break;
      }
      if(cur&0x80000000u) {
         return cur&0xFFFFu;
      }
      if(str[i]==0) {
         break;
      }
   }
   return -1;
}
const char *param_strings[] = {
   "OpenGL",
   "OpenGL_ES",
   "attribute0",
   "attribute1",
   "attribute2",
   "attribute3",
   "blend",
   "both",
   "clampToEdge",
   "color",
   "device",
   "exact",
   "first",
   "firstFrame",
   "incremental",
   "linear",
   "mask",
   "mirrorRepeat",
   "nearest",
   "none",
   "objectNormal",
   "objectPosition",
   "opaque",
   "primitiveId",
   "repeat",
   "second",
   "tessellate",
   "worldNormal",
   "worldPosition"
};
} //namespace visgl
